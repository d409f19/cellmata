buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.2'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id 'antlr'
}

apply plugin: 'org.ajoberstar.grgit'

group 'dk.aau.cs.d409f19'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

task run(type: JavaExec) {
    group = BasePlugin.BUILD_GROUP
    main = 'dk.aau.cs.d409f19.cellumata.MainKt'
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

import org.ajoberstar.grgit.*
def repo = Grgit.open(buildscript.sourceFile.parent + "/..")

jar {
    manifest {
        attributes 'Main-Class': 'dk.aau.cs.d409f19.cellumata.MainKt',
            'Git-Commit': repo.head().id,
            'Git-Branch': repo.branch.getCurrent().getName(),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself resulting in a 'fat jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    antlr "org.antlr:antlr4:4.7.2"
    testImplementation("org.junit.jupiter:junit-jupiter:5.4.1")
    compile "com.xenomachina:kotlin-argparser:2.0.7"
}

compileKotlin {
    dependsOn generateGrammarSource
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    dependsOn generateGrammarSource
    kotlinOptions.jvmTarget = "1.8"
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages", "-package", "dk.aau.cs.d409f19.antlr"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/dk/aau/cs/d409f19/antlr")
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

sourceSets {
    main.java.srcDirs += "${project.buildDir}/generated-src/antlr/main"
}
